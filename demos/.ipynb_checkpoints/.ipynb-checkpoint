{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "positive-insider",
   "metadata": {},
   "source": [
    "# Data\n",
    "- https://www.kaggle.com/benjaminwarner/resized-2015-2019-blindness-detection-images?select=resized+test+15"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sunrise-serial",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "professional-appendix",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:51.831065Z",
     "iopub.status.busy": "2021-07-04T21:17:51.830879Z",
     "iopub.status.idle": "2021-07-04T21:17:51.838915Z",
     "shell.execute_reply": "2021-07-04T21:17:51.838403Z",
     "shell.execute_reply.started": "2021-07-04T21:17:51.831009Z"
    }
   },
   "outputs": [],
   "source": [
    "import argparse\n",
    "import os\n",
    "import sys\n",
    "sys.path.append(\"../\")\n",
    "os.environ['TORCH_HOME'] = \"/media/hdd/Datasets/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "serious-bahamas",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:51.840167Z",
     "iopub.status.busy": "2021-07-04T21:17:51.839972Z",
     "iopub.status.idle": "2021-07-04T21:17:53.132626Z",
     "shell.execute_reply": "2021-07-04T21:17:53.132306Z",
     "shell.execute_reply.started": "2021-07-04T21:17:51.840143Z"
    }
   },
   "outputs": [],
   "source": [
    "import glob\n",
    "import albumentations\n",
    "import pandas as pd\n",
    "import zeus\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from efficientnet_pytorch import EfficientNet\n",
    "from sklearn import metrics, model_selection, preprocessing\n",
    "from zeus.callbacks import EarlyStopping, TensorBoardLogger, GradientClipping, PlotLoss\n",
    "from zeus.metrics import LabelSmoothingCrossEntropy\n",
    "from zeus.datasets import ImageDataset\n",
    "from torch.nn import functional as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "viral-luxury",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.133369Z",
     "iopub.status.busy": "2021-07-04T21:17:53.133247Z",
     "iopub.status.idle": "2021-07-04T21:17:53.138526Z",
     "shell.execute_reply": "2021-07-04T21:17:53.138166Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.133356Z"
    }
   },
   "outputs": [],
   "source": [
    "from zeus.utils.model_helpers import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "usual-updating",
   "metadata": {},
   "source": [
    "# Defining"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "complete-retention",
   "metadata": {},
   "source": [
    "## Params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "stunning-plane",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.139277Z",
     "iopub.status.busy": "2021-07-04T21:17:53.139125Z",
     "iopub.status.idle": "2021-07-04T21:17:53.141682Z",
     "shell.execute_reply": "2021-07-04T21:17:53.141178Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.139263Z"
    }
   },
   "outputs": [],
   "source": [
    "INPUT_PATH = \"/media/hdd/Datasets/blindness/\"\n",
    "MODEL_PATH = \"./models/\"\n",
    "MODEL_NAME = os.path.basename(\"blindness.pt\")\n",
    "TRAIN_BATCH_SIZE = 140\n",
    "VALID_BATCH_SIZE = 140\n",
    "IMAGE_SIZE = 192"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "musical-witness",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.142537Z",
     "iopub.status.busy": "2021-07-04T21:17:53.142394Z",
     "iopub.status.idle": "2021-07-04T21:17:53.149877Z",
     "shell.execute_reply": "2021-07-04T21:17:53.149316Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.142523Z"
    }
   },
   "outputs": [],
   "source": [
    "class Model(zeus.Model):\n",
    "    def __init__(self, num_classes):\n",
    "        super().__init__()\n",
    "\n",
    "        self.effnet = EfficientNet.from_pretrained(\"efficientnet-b0\")\n",
    "        self.dropout = nn.Dropout(0.1)\n",
    "        self.out = nn.Linear(1280, num_classes)\n",
    "\n",
    "    def monitor_metrics(self, outputs, targets):\n",
    "        outputs = torch.argmax(outputs, dim=1).cpu().detach().numpy()\n",
    "        targets = targets.cpu().detach().numpy()\n",
    "        accuracy = metrics.accuracy_score(targets, outputs)\n",
    "        return {\"accuracy\": accuracy}\n",
    "\n",
    "    def fetch_optimizer(self):\n",
    "        opt = torch.optim.AdamW(self.parameters(), lr=1e-4)\n",
    "        return opt\n",
    "\n",
    "    def forward(self, image, targets=None):\n",
    "        batch_size, _, _, _ = image.shape\n",
    "\n",
    "        x = self.effnet.extract_features(image)\n",
    "        x = F.adaptive_avg_pool2d(x, 1).reshape(batch_size, -1)\n",
    "        outputs = self.out(self.dropout(x))\n",
    "\n",
    "        if targets is not None:\n",
    "            #  loss = nn.CrossEntropyLoss()(outputs, targets)\n",
    "            loss = LabelSmoothingCrossEntropy()(outputs, targets)\n",
    "            metrics = self.monitor_metrics(outputs, targets)\n",
    "            return outputs, loss, metrics\n",
    "        return outputs, 0, {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "adult-generator",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.151197Z",
     "iopub.status.busy": "2021-07-04T21:17:53.150988Z",
     "iopub.status.idle": "2021-07-04T21:17:53.158131Z",
     "shell.execute_reply": "2021-07-04T21:17:53.157623Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.151176Z"
    }
   },
   "outputs": [],
   "source": [
    "train_aug = albumentations.Compose(\n",
    "    [\n",
    "        albumentations.Resize(IMAGE_SIZE,IMAGE_SIZE),\n",
    "        albumentations.Transpose(p=0.5),\n",
    "        albumentations.HorizontalFlip(p=0.5),\n",
    "        albumentations.VerticalFlip(p=0.5),\n",
    "        albumentations.ShiftScaleRotate(p=0.5),\n",
    "        albumentations.HueSaturationValue(\n",
    "            hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5\n",
    "        ),\n",
    "        albumentations.RandomBrightnessContrast(\n",
    "            brightness_limit=(-0.1, 0.1), contrast_limit=(-0.1, 0.1), p=0.5\n",
    "        ),\n",
    "        albumentations.Normalize(\n",
    "            mean=[0.485, 0.456, 0.406],\n",
    "            std=[0.229, 0.224, 0.225],\n",
    "            max_pixel_value=255.0,\n",
    "            p=1.0,\n",
    "        ),\n",
    "    ],\n",
    "    p=1.0,\n",
    ")\n",
    "\n",
    "valid_aug = albumentations.Compose(\n",
    "    [\n",
    "        albumentations.Resize(IMAGE_SIZE,IMAGE_SIZE),\n",
    "        albumentations.Normalize(\n",
    "            mean=[0.485, 0.456, 0.406],\n",
    "            std=[0.229, 0.224, 0.225],\n",
    "            max_pixel_value=255.0,\n",
    "            p=1.0,\n",
    "        ),\n",
    "    ],\n",
    "    p=1.0,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "general-recovery",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.160343Z",
     "iopub.status.busy": "2021-07-04T21:17:53.160134Z",
     "iopub.status.idle": "2021-07-04T21:17:53.162607Z",
     "shell.execute_reply": "2021-07-04T21:17:53.162207Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.160324Z"
    }
   },
   "outputs": [],
   "source": [
    "# train_image_paths = glob.glob(\n",
    "#     os.path.join(\n",
    "#         INPUT_PATH, f\"jpeg-{IMAGE_SIZE}x{IMAGE_SIZE}\", \"train\", \"**\", \"*.jpeg\"\n",
    "#     ),\n",
    "#     recursive=True,\n",
    "# )\n",
    "\n",
    "# valid_image_paths = glob.glob(\n",
    "#     os.path.join(\n",
    "#         INPUT_PATH, f\"jpeg-{IMAGE_SIZE}x{IMAGE_SIZE}\", \"val\", \"**\", \"*.jpeg\"\n",
    "#     ),\n",
    "#     recursive=True,\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "explicit-adjustment",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.163830Z",
     "iopub.status.busy": "2021-07-04T21:17:53.163624Z",
     "iopub.status.idle": "2021-07-04T21:17:53.166232Z",
     "shell.execute_reply": "2021-07-04T21:17:53.165623Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.163800Z"
    }
   },
   "outputs": [],
   "source": [
    "# train_targets = [x.split(\"/\")[-2] for x in train_image_paths]\n",
    "# valid_targets = [x.split(\"/\")[-2] for x in valid_image_paths]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "green-victorian",
   "metadata": {},
   "source": [
    "## Data pre process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "serial-amber",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.167103Z",
     "iopub.status.busy": "2021-07-04T21:17:53.167000Z",
     "iopub.status.idle": "2021-07-04T21:17:53.188907Z",
     "shell.execute_reply": "2021-07-04T21:17:53.188504Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.167091Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10_left</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10_right</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13_left</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      image  level\n",
       "0   10_left      0\n",
       "1  10_right      0\n",
       "2   13_left      0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(INPUT_PATH+\"trainLabels.csv\");df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "military-neutral",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.189706Z",
     "iopub.status.busy": "2021-07-04T21:17:53.189599Z",
     "iopub.status.idle": "2021-07-04T21:17:53.203063Z",
     "shell.execute_reply": "2021-07-04T21:17:53.202695Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.189692Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/media/hdd/Datasets/blindness/trainImages/10_l...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/media/hdd/Datasets/blindness/trainImages/10_r...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/media/hdd/Datasets/blindness/trainImages/13_l...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               image  level\n",
       "0  /media/hdd/Datasets/blindness/trainImages/10_l...      0\n",
       "1  /media/hdd/Datasets/blindness/trainImages/10_r...      0\n",
       "2  /media/hdd/Datasets/blindness/trainImages/13_l...      0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"image\"] = INPUT_PATH+\"trainImages/\"+df[\"image\"]+\".jpg\"; df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "animated-polyester",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.203703Z",
     "iopub.status.busy": "2021-07-04T21:17:53.203594Z",
     "iopub.status.idle": "2021-07-04T21:17:53.205735Z",
     "shell.execute_reply": "2021-07-04T21:17:53.205341Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.203690Z"
    }
   },
   "outputs": [],
   "source": [
    "# SUBSET REMOVE LATER\n",
    "df = df.head(5000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "geographic-needle",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.206332Z",
     "iopub.status.busy": "2021-07-04T21:17:53.206225Z",
     "iopub.status.idle": "2021-07-04T21:17:53.208335Z",
     "shell.execute_reply": "2021-07-04T21:17:53.207947Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.206319Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "marked-excess",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.208914Z",
     "iopub.status.busy": "2021-07-04T21:17:53.208811Z",
     "iopub.status.idle": "2021-07-04T21:17:53.211793Z",
     "shell.execute_reply": "2021-07-04T21:17:53.211481Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.208901Z"
    }
   },
   "outputs": [],
   "source": [
    "train_images ,valid_images =  train_test_split(df, test_size=.33)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "overall-october",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.212366Z",
     "iopub.status.busy": "2021-07-04T21:17:53.212260Z",
     "iopub.status.idle": "2021-07-04T21:17:53.214673Z",
     "shell.execute_reply": "2021-07-04T21:17:53.214259Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.212353Z"
    }
   },
   "outputs": [],
   "source": [
    "train_image_paths, valid_image_paths = train_images[\"image\"].values , valid_images[\"image\"].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "advisory-white",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.215272Z",
     "iopub.status.busy": "2021-07-04T21:17:53.215163Z",
     "iopub.status.idle": "2021-07-04T21:17:53.217625Z",
     "shell.execute_reply": "2021-07-04T21:17:53.217206Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.215258Z"
    }
   },
   "outputs": [],
   "source": [
    "train_targets, valid_targets = train_images[\"level\"].values , valid_images[\"level\"].values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "included-immunology",
   "metadata": {},
   "source": [
    "## Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "golden-duplicate",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.218298Z",
     "iopub.status.busy": "2021-07-04T21:17:53.218186Z",
     "iopub.status.idle": "2021-07-04T21:17:53.220866Z",
     "shell.execute_reply": "2021-07-04T21:17:53.220480Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.218284Z"
    }
   },
   "outputs": [],
   "source": [
    "lbl_enc = preprocessing.LabelEncoder()\n",
    "train_targets = lbl_enc.fit_transform(train_targets)\n",
    "valid_targets = lbl_enc.transform(valid_targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "continuing-festival",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.221495Z",
     "iopub.status.busy": "2021-07-04T21:17:53.221387Z",
     "iopub.status.idle": "2021-07-04T21:17:53.223946Z",
     "shell.execute_reply": "2021-07-04T21:17:53.223517Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.221481Z"
    }
   },
   "outputs": [],
   "source": [
    "train_dataset = ImageDataset(\n",
    "    image_paths=train_image_paths,\n",
    "    targets=train_targets,\n",
    "    augmentations=train_aug,\n",
    ")\n",
    "\n",
    "valid_dataset = ImageDataset(\n",
    "    image_paths=valid_image_paths,\n",
    "    targets=valid_targets,\n",
    "    augmentations=valid_aug,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "broad-mauritius",
   "metadata": {},
   "source": [
    "## Callbacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "heard-general",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.224585Z",
     "iopub.status.busy": "2021-07-04T21:17:53.224477Z",
     "iopub.status.idle": "2021-07-04T21:17:53.306383Z",
     "shell.execute_reply": "2021-07-04T21:17:53.305999Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.224572Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded pretrained weights for efficientnet-b0\n"
     ]
    }
   ],
   "source": [
    "model = Model(num_classes=len(lbl_enc.classes_))\n",
    "\n",
    "es = EarlyStopping(\n",
    "    monitor=\"valid_loss\",\n",
    "    model_path=os.path.join(MODEL_PATH, MODEL_NAME + \".bin\"),\n",
    "    patience=3,\n",
    "    mode=\"min\",\n",
    ")\n",
    "\n",
    "tb = TensorBoardLogger()\n",
    "grc = GradientClipping(5)\n",
    "pl = PlotLoss(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "controversial-newport",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.307240Z",
     "iopub.status.busy": "2021-07-04T21:17:53.307033Z",
     "iopub.status.idle": "2021-07-04T21:17:53.312024Z",
     "shell.execute_reply": "2021-07-04T21:17:53.311610Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.307221Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Trainable Params: 5294953\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "5294953"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count_parameters(model, showtable=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "thousand-format",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-04T21:17:53.312639Z",
     "iopub.status.busy": "2021-07-04T21:17:53.312530Z",
     "iopub.status.idle": "2021-07-04T21:19:09.959204Z",
     "shell.execute_reply": "2021-07-04T21:19:09.958688Z",
     "shell.execute_reply.started": "2021-07-04T21:17:53.312626Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████| 24/24 [00:12<00:00,  1.86it/s, accuracy=0.594, loss=1.37, stage=train]\n",
      "100%|███████| 12/12 [00:05<00:00,  2.18it/s, accuracy=0.727, loss=1.18, stage=valid]\n",
      "100%|███████| 24/24 [00:13<00:00,  1.78it/s, accuracy=0.729, loss=1.06, stage=train]\n",
      "100%|███████| 12/12 [00:05<00:00,  2.31it/s, accuracy=0.732, loss=1.03, stage=valid]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████| 24/24 [00:13<00:00,  1.78it/s, accuracy=0.731, loss=0.993, stage=train]\n",
      "100%|██████| 12/12 [00:05<00:00,  2.30it/s, accuracy=0.733, loss=0.993, stage=valid]\n",
      "100%|██████| 24/24 [00:12<00:00,  1.88it/s, accuracy=0.733, loss=0.975, stage=train]\n",
      "100%|██████| 12/12 [00:05<00:00,  2.19it/s, accuracy=0.733, loss=0.996, stage=valid]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "EPOCHS = 4\n",
    "\n",
    "model.fit(\n",
    "    train_dataset,\n",
    "    valid_dataset=valid_dataset,\n",
    "    train_bs=TRAIN_BATCH_SIZE,\n",
    "    valid_bs=VALID_BATCH_SIZE,\n",
    "    device=\"cuda\",\n",
    "    epochs=EPOCHS,\n",
    "    callbacks=[grc, pl, tb],\n",
    "#     callbacks=[es, tb],\n",
    "    fp16=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "lightweight-problem",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fluid-timer",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
